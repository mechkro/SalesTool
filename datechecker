import datetime as dt
import tkinter as tk
import collections as clc
import random as rand
import time

BG =  '#0C1021'
FG = 'white'
flarge = ('Verdana', 18, 'bold')
fsmall = ('Verdana', 10, 'bold')


today_date = dt.datetime.today()

months_hold = clc.OrderedDict()

tempr = {'JAN':(1,31),
                'FEB':(2,18),
                'MAR':(3,31),
                'APR':(4,30),
                'MAY':(5,31),
                'JUN':(6,30),
                'JUL':(7,31),
                'AUG':(8,31),
                'SEP':(9,30),
                'OCT':(10,31),
                'NOV':(11,30),
                'DEC':(12,31)}

temp = [['JAN', 31], ['FEB', 28], ['MAR', 31], ['APR', 30], ['MAY',31], ['JUN',30], ['JUL',31], ['AUG',31], ['SEP',30], ['OCT',31], ['NOV',30], ['DEC',31]]
#temp = [['JAN',31], ('FEB',28), ('MAR',31), ('APR',30), ('MAY',31), ('JUN',30), ('JUL',31), ('AUG',31), ('SEP',30), ('OCT',31), ('NOV',30), ('DEC',31)]
months = ['JAN', 'FEB', 'MAR', 'APR', 'MAY', 'JUN', 'JUL', 'AUG', 'SEP', 'OCT', 'NOV', 'DEC']


for i in months:
    v = tempr[i][1]
    months_hold[i] = v
    



class DateCheck:
    def __init__(self, parent):
        self.parent = parent

        self.frame = tk.Frame(self.parent, bg = BG)
        self.frame.grid()

        self.mlab = tk.Label(self.frame, text = 'Choose Month', bg = BG, fg = FG, font = flarge)
        self.mlab.grid(row = 0, padx = 5, pady = 5)
        
        self.sbox = tk.Spinbox(self.frame, values = [i for i in months_hold.keys()], bg = BG, fg = FG)
        self.sbox.grid(row = 1, padx = 10, pady = 10)

        self.b = tk.Button(self.frame, text = 'ok', command = self.load_spinbox, bg = BG, fg = FG)
        self.b.grid(row = 2, padx = 5, pady = 5)
        
        self.txtbox = tk.Text(self.frame, bg = BG, fg = FG, height = 10, width = 40)
        self.txtbox.grid(row = 3, padx = 5, pady = 5)

    #--------------------------------------------------------------------------
    def load_spinbox(self):
        day = int(months_hold[self.sbox.get()])
        days = range(1,day+1)

        self.sbox.config(state = tk.DISABLED, disabledbackground = BG, disabledforeground = 'dark goldenrod')

        self.mlab.config(font = fsmall)
        self.dlab = tk.Label(self.frame, text = 'Choose day', bg = BG, fg = FG, font = flarge)
        self.dlab.grid(row = 2, padx = 5, pady = 5)
        
        self.dsbox = tk.Spinbox(self.frame, values = [i for i in days], bg = BG, fg = FG)
        self.dsbox.grid(row = 3, padx = 10, pady = 10)
        
        self.b.config(command = self.load_year, bg = BG, fg = FG)
        self.b.grid(row = 4, padx = 5, pady = 5)
        
        self.txtbox.grid(row = 5,  padx = 5, pady = 5)
        self.parent.update()


    #--------------------------------------------------------------------------
    def load_year(self):

        self.dlab.config(font = fsmall)
        self.ylab = tk.Label(self.frame, text = 'Choose year', bg = BG, fg = FG, font = flarge)
        self.ylab.grid(row = 4, padx = 5, pady = 5)

        self.dsbox.config(state = tk.DISABLED, disabledbackground = BG, disabledforeground = 'dark goldenrod')
        
        self.ysbox = tk.Spinbox(self.frame, values = [i for i in range(2000,2021)], bg = BG, fg = FG)
        self.ysbox.grid(row = 5, padx = 10, pady = 10)

        self.b.config(command = self.days_diff, bg = BG, fg = FG)
        self.b.grid(row = 6, padx = 5, pady = 5)
        
        self.txtbox.grid(row = 7,  padx = 5, pady = 5)
        self.parent.update()

    #--------------------------------------------------------------------------
    def days_diff(self):
        
        self.ylab.config(font = fsmall)
        temp = {'JAN':1,
                'FEB':2,
                'MAR':3,
                'APR':4,
                'MAY':5,
                'JUN':6,
                'JUL':7,
                'AUG':8,
                'SEP':9,
                'OCT':10,
                'NOV':11,
                'DEC':12}

        m = temp[self.sbox.get()]
        d = self.dsbox.get()
        y = self.ysbox.get()
        datetxt = dt.datetime.strptime('{}/{}/{}'.format(m,d,y),'%m/%d/%Y')
        diff = dt.datetime.today()-datetxt
        print('Days since todays date: {}'.format(diff.days))
        print('Which equals {} years'.format(diff.days/365.0))

        
        #self.testing_grounds()
        self.load_list()

    def load_list(self):
        itr = 0
        tots = 0
        for i in range(100):
            k = rand.choice([x for x in tempr.keys()])
            m = tempr[k][0]
            d = tempr[k][1]
            y = rand.randrange(2019,2020)
            dtxt = dt.datetime.strptime('{}/{}/{}'.format(m,d,y),'%m/%d/%Y')
            diff = dt.datetime.today()-dtxt
            tots += 1        
            self.txtbox.insert(tk.END, 'Days since todays date: {}\n'.format(diff.days))
            self.txtbox.insert(tk.END, 'In Weeks: {}\n'.format(diff.days/7.0))
            self.txtbox.insert(tk.END, 'In Years:  {}\n'.format(diff.days/365.0))
            self.txtbox.insert(tk.END, '\n')

    #-------------------------------------------------------------------------------------------
    def testing_grounds(self):

        itr = 0
        tots = 0
        for i in range(100):
            k = rand.choice([x for x in tempr.keys()])
            m = tempr[k][0]
            d = tempr[k][1]
            y = rand.randrange(2019,2020)
            dtxt = dt.datetime.strptime('{}/{}/{}'.format(m,d,y),'%m/%d/%Y')
            diff = dt.datetime.today()-dtxt
            tots += 1

            print('\n\n')
            print(dtxt)
            print('Days since todays date: {}'.format(diff.days))

            if diff.days >= 300:
                print('NEED TO F/U!!!!!!')
                time.sleep(1)
                itr += 1
            else:
                pass
            print('\nTotal Followups:  {} out of {}'.format(itr, tots))
        


#---------------------------------------------------------------------------------------
if __name__ == '__main__':
    root = tk.Tk()
    DateCheck(root)
    root.mainloop()
